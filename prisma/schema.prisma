// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String              @id @default(cuid())
  username     String              @unique
  passwordHash String
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  accounts     OverwatchAcccount[]
  matches      Match[]
}

model OverwatchAcccount {
  id              String                 @id @default(cuid())
  battleTag       String                 @unique @default("")
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  roleRank        Json?                  @db.Json
  matches         Match[]
  heroes          HeroesPlayedByPlayer[]
  competitiveSets CompetitiveSet[]
  User            User?                  @relation(fields: [userId], references: [id])
  userId          String?                @unique
}

model OverwatchMap {
  id        String  @id @default(cuid())
  name      String  @default("")
  type      String
  mapImgUrl String
  matches   Match[]

  @@unique([name])
}

model Hero {
  id           String                 @id @default(cuid())
  name         String                 @unique @default("")
  role         String
  avatarImgUrl String
  playedBy     HeroesPlayedByPlayer[]
}

model HeroesPlayedByPlayer {
  id        String            @id @default(cuid())
  hero      Hero              @relation(fields: [heroId], references: [id])
  heroId    String
  player    OverwatchAcccount @relation(fields: [playerId], references: [id])
  playerId  String
  inMatch   Match             @relation(fields: [matchId], references: [id])
  matchId   String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model Match {
  id          String                 @id @default(cuid())
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  gameMode    String
  attackFirst Boolean?
  matchResult String
  location    OverwatchMap           @relation(fields: [locationId], references: [id])
  locationId  String
  account     OverwatchAcccount[]
  heroes      HeroesPlayedByPlayer[]
  user        User                   @relation(fields: [createdBy], references: [id])
  createdBy   String
  comment     String?                @db.VarChar(350)
  playerVibe  Int
  inSeason    Season                 @relation(fields: [seasonId], references: [id])
  seasonId    String
}

model Season {
  id             String           @id @default(cuid())
  name           String           @unique @default("Season 0")
  startDate      DateTime         @default(now())
  endDate        DateTime         @default(now())
  matches        Match[]
  competitiveSet CompetitiveSet[]
}

model CompetitiveSet {
  id        String            @id @default(cuid())
  playerId  String
  seasonId  String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  player    OverwatchAcccount @relation(fields: [playerId], references: [id])
  season    Season            @relation(fields: [seasonId], references: [id])
}
